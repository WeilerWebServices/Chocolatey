@using NuGetGallery;
@model CourseViewModel
@{
    ViewBag.Title = "The Choco New Command";
}
@section LeftSideColumn {
    @Html.Partial("~/Views/Courses/_LeftSideColumn.cshtml", new CourseLeftViewModel() { CourseNameType = Model.CourseNameType, CourseModules = Model.CourseModules, UserCourseAchievements = Model.UserCourseAchievements })
}
@section RightSideColumn {
    <li><a href="#usage">Usage</a></li>
    <li><a href="#examples">Examples</a></li>
    <li><a href="#exit-codes">Exit Codes</a></li>
    <li><a href="#options-and-switches">Options and Switches</a></li>
}

<h2 id="usage" class="mb-3">Usage</h2>
<pre class="border mb-3"><code class="language-none">choco new &lt;name&gt; [&lt;options/switches&gt;] [&lt;property=value&gt; &lt;propertyN=valueN&gt;]</code></pre>
<p>Possible properties to pass:</p>
<ul>
    <li>packageversion</li>
    <li>maintainername</li>
    <li>maintainerrepo</li>
    <li>installertype</li>
    <li>url</li>
    <li>url64</li>
    <li>silentargs</li>
</ul>
<div class="callout callout-primary">
    <strong>NOTE:</strong> Starting in 0.9.10, you can pass arbitrary property value pairs
    through to templates. This really unlocks your ability to create
    packages automatically!
</div>
<div class="callout callout-primary">
    <strong>NOTE:</strong> <a href="https://chocolatey.org/compare">Chocolatey for Business</a> can create complete packages by just
    pointing the new command to native installers! It can also download and internalize remote
    resources from existing packages so that existing packages can be used
    without being tied to the internet.
    This is called automatic recompile.
</div>

<h2 id="examples" class="mt-5 mb-3">Examples</h2>
<pre class="border mb-3"><code class="language-none">choco new bob
choco new bob -a --version 1.2.0 maintainername=&quot;&#39;This guy&#39;&quot;
choco new bob silentargs=&quot;&#39;/S&#39;&quot; url=&quot;&#39;https://somewhere/out/there.msi&#39;&quot;
choco new bob --outputdirectory Packages</code></pre>
<p>
    <strong>NOTE:</strong> See scripting in <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-reference" })#how-to-pass-options-switches">how to pass arguments</a> (<code>choco -?</code>) for how to<br />
    write proper scripts and integrations.
</p>

<h2 id="exit-codes" class="mt-5 mb-3">Exit Codes</h2>
<p>Exit codes that normally result from running this command.</p>
<p>Normal:</p>
<ul>
    <li>0: operation was successful, no issues detected</li>
    <li>–1 or 1: an error has occurred</li>
</ul>
<p>
    If you find other exit codes that we have not yet documented, please
    file a ticket so we can document it at
    <a href="https://github.com/chocolatey/choco/issues/new/choose" class="uri">https://github.com/chocolatey/choco/issues/new/choose</a>.
</p>

<h2 id="options-and-switches" class="mt-5 mb-3">Options and Switches</h2>
<div class="callout callout-primary">
    <strong>NOTE:</strong> Options and switches apply to all items passed, so if you are
    running a command like install that allows installing multiple
    packages, and you use <code>--version=1.0.0</code>, it is going to look for and
    try to install version 1.0.0 of every package passed. So please split
    out multiple package calls when wanting to pass specific options.
</div>
<p>Includes <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-reference" })#default-options-and-switches">default options/switches</a> (included below for completeness).</p>
<pre class="border mb-3"><code class="language-none">
-?, --help, -h
    Prints out the help menu.

-d, --debug
    Debug - Show debug messaging.

-v, --verbose
    Verbose - Show verbose messaging. Very verbose messaging, avoid using
    under normal circumstances.

    --trace
    Trace - Show trace messaging. Very, very verbose trace messaging. Avoid
    except when needing super low-level .NET Framework debugging. Available
    in 0.10.4+.

    --nocolor, --no-color
    No Color - Do not show colorization in logging output. This overrides
    the feature &#39;logWithoutColor&#39;, set to &#39;False&#39;. Available in 0.10.9+.

    --acceptlicense, --accept-license
    AcceptLicense - Accept license dialogs automatically. Reserved for
    future use.

-y, --yes, --confirm
    Confirm all prompts - Chooses affirmative answer instead of prompting.
    Implies --accept-license

-f, --force
    Force - force the behavior. Do not use force during normal operation -
    it subverts some of the smart behavior for commands.

    --noop, --whatif, --what-if
    NoOp / WhatIf - Don&#39;t actually do anything.

-r, --limitoutput, --limit-output
    LimitOutput - Limit the output to essential information

    --timeout, --execution-timeout=VALUE
    CommandExecutionTimeout (in seconds) - The time to allow a command to
    finish before timing out. Overrides the default execution timeout in the
    configuration of 2700 seconds. &#39;0&#39; for infinite starting in 0.10.4.

-c, --cache, --cachelocation, --cache-location=VALUE
    CacheLocation - Location for download cache, defaults to %TEMP% or value
    in chocolatey.config file.

    --allowunofficial, --allow-unofficial, --allowunofficialbuild, --allow-unofficial-build
    AllowUnofficialBuild - When not using the official build you must set
    this flag for choco to continue.

    --failstderr, --failonstderr, --fail-on-stderr, --fail-on-standard-error, --fail-on-error-output
    FailOnStandardError - Fail on standard error output (stderr), typically
    received when running external commands during install providers. This
    overrides the feature failOnStandardError.

    --use-system-powershell
    UseSystemPowerShell - Execute PowerShell using an external process
    instead of the built-in PowerShell host. Should only be used when
    internal host is failing. Available in 0.9.10+.

    --no-progress
    Do Not Show Progress - Do not show download progress percentages.
    Available in 0.10.4+.

    --proxy=VALUE
    Proxy Location - Explicit proxy location. Overrides the default proxy
    location of &#39;&#39;. Available for config settings in 0.9.9.9+, this CLI
    option available in 0.10.4+.

    --proxy-user=VALUE
    Proxy User Name - Explicit proxy user (optional). Requires explicity
    proxy (`--proxy` or config setting). Overrides the default proxy user of
    &#39;123&#39;. Available for config settings in 0.9.9.9+, this CLI option
    available in 0.10.4+.

    --proxy-password=VALUE
    Proxy Password - Explicit proxy password (optional) to be used with
    username. Requires explicity proxy (`--proxy` or config setting) and
    user name.  Overrides the default proxy password (encrypted in settings
    if set). Available for config settings in 0.9.9.9+, this CLI option
    available in 0.10.4+.

    --proxy-bypass-list=VALUE
    ProxyBypassList - Comma separated list of regex locations to bypass on
    proxy. Requires explicity proxy (`--proxy` or config setting). Overrides
    the default proxy bypass list of &#39;&#39;. Available in 0.10.4+.

    --proxy-bypass-on-local
    Proxy Bypass On Local - Bypass proxy for local connections. Requires
    explicity proxy (`--proxy` or config setting). Overrides the default
    proxy bypass on local setting of &#39;True&#39;. Available in 0.10.4+.

    --log-file=VALUE
    Log File to output to in addition to regular loggers. Available in 0.1-
    0.8+.
-a, --auto, --automaticpackage
    AutomaticPackage - Generate automatic package instead of normal.
    Defaults to false

-t, --template, --template-name=VALUE
    TemplateName - Use a named template in
    C:\ProgramData\chocolatey\templates\templatename instead of built-in
    template. Available in 0.9.9.9+. Manage templates as packages in 0.9.10+.

    --name=VALUE
    Name [Required]- the name of the package. Can be passed as first
    parameter without &quot;--name=&quot;.

    --version=VALUE
    Version - the version of the package. Can also be passed as the property
    PackageVersion=somevalue

    --maintainer=VALUE
    Maintainer - the name of the maintainer. Can also be passed as the
    property MaintainerName=somevalue

    --out, --outdir, --outputdirectory, --output-directory=VALUE
    OutputDirectory - Specifies the directory for the created Chocolatey
    package file. If not specified, uses the current directory. Available in
    0.9.10+.

    --built-in, --built-in-template, --originaltemplate, --original-template, --use-original-template, --use-built-in-template
    BuiltInTemplate - Use the original built-in template instead of any
    override. Available in 0.9.10+.

    --file, --url=VALUE
    Location of binary. In [Chocolatey for Business](https://chocolatey.org/compare), file is used for auto-
    detection (native installer, zip, patch/upgrade file, or remote url to
    download first) to completely create a package with proper silent
    arguments! Can be 32-bit or 64-bit architecture.  Available in licensed
    editions only (licensed version 1.4.0+, url/zip starting in 1.6.0). See
    https://chocolatey.org/docs/features-create-packages-from-installers

    --file64, --url64=VALUE
    Optional - used when specifying both a 32-bit and a 64-bit file. Can be
    an installer or a zip, or remote url to download. Available in licensed
    editions only (licensed version 1.6.0+).

    --keepremote, --keep-remote, --originallocation, --original-location, --useoriginallocation, --use-original-location, --useoriginalfileslocation, --use-original-files-location
    Use Original Files Location - when using file or url, use the original
    location in packaging. Available in [licensed editions](https://chocolatey.org/compare) only (licensed
    version 1.6.0+).

    --checksum, --downloadchecksum, --download-checksum=VALUE
    Download Checksum - checksum to verify File/Url with. Defaults to empty.
    Available in [licensed editions](https://chocolatey.org/compare) only (licensed version 1.7.0+).

    --checksum64, --checksumx64, --downloadchecksumx64, --download-checksum-x64=VALUE
    Download Checksum 64-bit - checksum to verify File64/Url64 with.
    Defaults to empty. Available in [licensed editions](https://chocolatey.org/compare) only (licensed version
    1.7.0+).

    --checksumtype, --checksum-type, --downloadchecksumtype, --download-checksum-type=VALUE
    Download Checksum Type - checksum type for File/Url (and optional
    separate 64-bit files when specifying both). Used in conjunction with
    Download Checksum and Download Checksum 64-bit. Available values are
    &#39;md5&#39;, &#39;sha1&#39;, &#39;sha256&#39; or &#39;sha512&#39;. Defaults to &#39;sha256&#39;.  Available in
    Business editions only (licensed version 1.7.0+).

    --pauseonerror, --pause-on-error
    Pause on Error - Pause when there is an error with creating the package.
    Available in [licensed editions](https://chocolatey.org/compare) only (licensed version 1.7.0+).

    --buildpackage, --build-package, --build-packages
    Build Package - Attempt to compile the package after creating it.
    Available in [licensed editions](https://chocolatey.org/compare) only (licensed version 1.7.0+).

    --fromprograms, --from-programs, --fromprogramsandfeatures, --from-programs-and-features
    Generate Packages From Installed Software - Generate packages from the
    installed software on a system (does not handle dependencies). Available
    in Business editions only (licensed version 1.8.0+).

    --removearchitecture, --removearchitecturefromname, --remove-architecture, --remove-architecture-from-name
    Remove Architecture From Name - Remove x86, x64, 64-bit, etc from the
    package id. Default setting is to remove architecture. Available in
    Business editions only (licensed version 1.8.0+).

    --includearchitecture, --includearchitectureinname, --include-architecture, --include-architecture-in-name
    Include Architecture in Package Name - Leave x86, x64, 64-bit, etc as
    part of the package id. Default setting is to remove architecture.
    Available in Business editions only (licensed version 1.8.0+).
</code></pre>
<p><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-reference" })">Command Reference</a></p>
<p><strong><em>NOTE:</em></strong> This documentation has been automatically generated from <code>choco new -h</code>.</p>

@*Quiz*@
<div>
    <h2 class="mt-5">Test Your Skills!</h2>
    @if (!User.Identity.IsAuthenticated)
    {
        @Html.Partial("~/Views/Courses/_QuizCTA.cshtml")
    }
    else
    {
        @Html.ValidationSummary(true)
        using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            <fieldset class="form @if (Model.UserCourseAchievements != null)
                                  {
                                      var courseAchievement = Model.UserCourseAchievements.FirstOrDefault(c => c.CourseKey == Model.CourseKey);
                                      if (courseAchievement != null)
                                      {
                                          CourseModuleAchievementViewModel moduleAchievement = courseAchievement.CourseModuleAchievements.FirstOrDefault(m => m.CourseModuleKey == Model.CourseModuleKey);
                                          if (moduleAchievement != null)
                                          {
                                              <text>mod-completed</text>
                                          }
                                      }
                                  }">
                <legend class="d-none">Quiz</legend>
                @Html.HiddenFor(m => m.CourseName)
                @Html.HiddenFor(m => m.CourseKey)
                @Html.HiddenFor(m => m.CourseModuleKey)
                <div class="form-field mt-3">
                    <h5>What exit code will be returned from the choco new command if everything worked correctly?</h5>
                    @Html.RadioButtonFor(m => m.QuestionOne, "1", new { id = "QuestOneOptionOne" })
                    <label for="QuestOneOptionOne">0</label><br />
                    @Html.RadioButtonFor(m => m.QuestionOne, "0", new { id = "QuestOneOptionTwo" })
                    <label for="QuestOneOptionTwo">1</label><br />
                    @Html.RadioButtonFor(m => m.QuestionOne, "0", new { id = "QuestOneOptionThree" })
                    <label for="QuestOneOptionThree">200</label>
                </div>
                <div class="form-field mt-3">
                    <h5>What option can be passed to the choco new command to control where the generated files are placed?</h5>
                    @Html.RadioButtonFor(m => m.QuestionTwo, "0", new { id = "QuestTwoOptionOne" })
                    <label for="QuestTwoOptionOne"><code>--template</code></label><br />
                    @Html.RadioButtonFor(m => m.QuestionTwo, "1", new { id = "QuestTwoOptionTwo" })
                    <label for="QuestTwoOptionTwo"><code>--output-directory</code></label><br />
                    @Html.RadioButtonFor(m => m.QuestionTwo, "0", new { id = "QuestTwoOptionThree" })
                    <label for="QuestTwoOptionThree"><code>--name</code></label>
                </div>
                <input class="btn btn-primary mt-3 disabled" data-toggle="modal" data-target="#quiz-modal" type="submit" value="Check Answers" title="Check Answers" />
            </fieldset>
        }

        @Html.Partial("~/Views/Courses/_CourseAchievementBadgeDisplay.cshtml", Model)
    }
</div>

@Html.Partial("~/Views/Courses/_Popup.cshtml", Model)