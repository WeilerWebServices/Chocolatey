@using NuGetGallery;
@model CourseViewModel
@{
    ViewBag.Title = "Internationalization and Localization of Packages";
}
@section LeftSideColumn {
    @Html.Partial("~/Views/Courses/_LeftSideColumn.cshtml", new CourseLeftViewModel() { CourseNameType = Model.CourseNameType, CourseModules = Model.CourseModules, UserCourseAchievements = Model.UserCourseAchievements })
}
@section RightSideColumn {
    <li><a href="#internationalization-localization">Internationalization and Localization of Packages</a></li>
}

<h2 id="internationalization-localization" class="mb-3">Internationalization and Localization of Packages</h2>
<p>For Chocolatey, internationalization and localization of packages is very important, because it has users from all over the world. Many applications support multiple languages, but they use several different methods to achieve that. Therefore, there is no standard how internationalization/localization has to be integrated into packages. However, here are a few examples of packages that use various techniques. You can use them as inspiration for new packages:</p>
<ul>
    <li>The ideal situation is when an application determines the user's system language and automatically installs with that language. Then you don't have to take any action relating to localization, because the application already handles that. Examples of such applications are <a href="https://chocolatey.org/packages/vlc">VLC Media Player</a> and <a href="https://chocolatey.org/packages/libreoffice-fresh">LibreOffice</a>.</li>
    <li>When an application provides different installers for different languages, you should determine the system language and download the appropriate installer. The package for <a href="https://chocolatey.org/packages/Firefox">Mozilla Firefox</a> (<a href="https://github.com/chocolatey/chocolatey-coreteampackages/tree/master/automatic/Firefox">source code</a>) uses this method.</li>
    <li>Sometimes an application installer or executable has already integrated all supported languages, but doesn't automatically select the system language during a silent install. Often you can pass an additional install parameter to select the desired language. This is used for example in the <a href="https://chocolatey.org/packages/ccleaner">CCleaner</a> package (<a href="https://github.com/tonigellida/chocolateyautomaticpackages/tree/master/ccleaner">source code</a>).</li>
    <li>Some application use separate language files which must be downloaded separately and put somewhere in the application directory. It is best when you create a separate package for the language files. If your package id is <code>packageid</code>, then call it <code>packageid-langfiles</code>. The <a href="https://chocolatey.org/packages/keepass-langfiles">language files package for KeePass</a> is an example how this can be achieved.</li>
</ul>

@*Quiz*@
<div>
    <h2 class="mt-5">Test Your Skills!</h2>
    @if (!User.Identity.IsAuthenticated)
    {
        @Html.Partial("~/Views/Courses/_QuizCTA.cshtml")
    }
    else
    {
        @Html.ValidationSummary(true)
        using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            <fieldset class="form @if (Model.UserCourseAchievements != null)
                                  {
                                      var courseAchievement = Model.UserCourseAchievements.FirstOrDefault(c => c.CourseKey == Model.CourseKey);
                                      if (courseAchievement != null)
                                      {
                                          CourseModuleAchievementViewModel moduleAchievement = courseAchievement.CourseModuleAchievements.FirstOrDefault(m => m.CourseModuleKey == Model.CourseModuleKey);
                                          if (moduleAchievement != null)
                                          {
                                              <text>mod-completed</text>
                                          }
                                      }
                                  }">
                <legend class="d-none">Quiz</legend>
                @Html.HiddenFor(m => m.CourseName)
                @Html.HiddenFor(m => m.CourseKey)
                @Html.HiddenFor(m => m.CourseModuleKey)
                <div class="form-field mt-3">
                    <h5>Is there a standard mechanism for integrating internationalization/localization of software into Chocolatey Packages?</h5>
                    @Html.RadioButtonFor(m => m.QuestionOne, "0", new { id = "QuestOneOptionOne" })
                    <label for="QuestOneOptionOne">Yes</label><br />
                    @Html.RadioButtonFor(m => m.QuestionOne, "1", new { id = "QuestOneOptionTwo" })
                    <label for="QuestOneOptionTwo">No</label>
                </div>
                <div class="form-field mt-3">
                    <h5>What is a common way to tell a package the language to install?</h5>
                    @Html.RadioButtonFor(m => m.QuestionTwo, "0", new { id = "QuestTwoOptionOne" })
                    <label for="QuestTwoOptionOne">Installer parameters</label><br />
                    @Html.RadioButtonFor(m => m.QuestionTwo, "0", new { id = "QuestTwoOptionTwo" })
                    <label for="QuestTwoOptionTwo">Package parameters</label><br />
                    @Html.RadioButtonFor(m => m.QuestionTwo, "1", new { id = "QuestTwoOptionThree" })
                    <label for="QuestTwoOptionThree">Both of the above</label>
                </div>
                <input class="btn btn-primary mt-3 disabled" data-toggle="modal" data-target="#quiz-modal" type="submit" value="Check Answers" title="Check Answers" />
            </fieldset>
        }

        @Html.Partial("~/Views/Courses/_CourseAchievementBadgeDisplay.cshtml", Model)
    }
</div>

@Html.Partial("~/Views/Courses/_Popup.cshtml", Model)